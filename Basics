C++ vs java->       C++-> platform dependent
                          supports multiple inheritance
                          call by value and call by reference both can be called
                    
                    Java-> platform independent.
                           does not supports multiple inheritance.
                           call by referenced is not allowed as we can unot used pointers in java externally.

JDK,JVM,JRE->     JDK(Java Development Kit) environment used for developing java application. (JRE+tools)
                  It includes JRE(Java Run time environment), javac(java Compiler) and other tools needed for development.
                  
                  JRE-> environment to run java program. Used by end users who only run the java program.
                  JVM(Java Virtual Machine)-> Whenever we run java program , it is the responsibilty of jvm to execute a java program line by line. So, it acts as 
                                              a interpreter.

.Java file conatains the source code.
.class class contians the byte code (Machine level Code).
How java program executes?
Class Loader-> Loads all the necesaary files needed for execution of program.
Byte Code Verifier-> checks all the system requirement whether this program is suitable for that environment or not.
Interpreter-> convert the code so that machine can easily understand the code.
Runtime-> Code will executed and gives the expected output.

final vs static
                  final-> final values just means that valu can not be chnaged. And it means that we can not chnage the reference value of the object.
                  static-> means once assign any variable static we can easily access with in the whole class. And can not crete the object of class for using it.

Why java is not pure oop? in pure oop, everything we treat inside the program as object. But in java we can use primitive datatype.

Constructor is used to inialize the value of object.
Types of constructor-> 1) Default:  If there is no constructor in class compiler will automatically creates the constructor.
                                    Default construtor is used to provide the default value to the object like 0,null depending upon the type.
                       2) Zero Parameter: User defined constructor having no argumnet.
                       3) Parametrized constructor: having paramter. used to provide the different value to distinct objects.

Constructor Overloading-> Having more than one constructor with the different parameter list.

Heap memory vs stack memory:  Memory space allocated to the program to execute.Every time when we create a object that value is stored in heap memory. And the refernce
                              of that variable is stored in stack memory.
                              So stack memory is allocated to contigious memory allocation while in heap it is random order.

Why java not supports mutiple inheritance? Due to amiguity error. And we can achieve multiple inhertiance using interfaces.

this vs super->       this : represent the current instance of the class.
                             so, this is used to call the default constructor of same class.
                             this keyword is used to the same class object.
                      super : represents the current instance of parent class.
                              so, super is used to call the default constructor of parent class.
                              super keyword is used to access the parent class object.
                              
Object class is the parent class of all the classes in java.
toString()-> method of object class in java.
             takes object as an argument.
             used when we retrun string representaion of object and when we know about the reference of the object.
             System.out.println(mb);  //mb is object.
             Internally it will gives as mb.toString() by the compiler. to retrin the reference value

Can we overload main function? Yes, but jvm calls only that which has string as an argument.

Interface is the blueprint of the class. used to achieve total astraction and multiple inheritance. means all the methods in the interface are declared with 
empty body and the class that implements the interface must have to declare all the methods present in the interface.
class -> extends -> class
class-> implements -> interface
interface -> extends -> interface
 
abstract vs interface:    abstract-> can have both abstract as well as non abstarct methods
                                     does not support multiple inheritance
                                     abstract keyword is used
                          interface-> all methods are abstract.
                                      supports multiple inheritance
                                      interface keyword is used.

packages-> group of similar types of classes, interfaces 
           Advantages-> easily maintained.
                        remove naming collision.

Exception handiling -> errors which disrupts the normal flow of execution.
                       occurs at the run time rather than compile time .

Why we use Exceptional handling? If in between of the program exception occur. So normal flow terminates. So, it avoid it use exceptional handling.
Exceptions are the types of error that may occur in between the program.
  Throwable class is the root class of java exception.
                                    
                                                                    
                                                                    Throwable
                                                                /               \
                                                              Exception         Error
                                                                |                   |
                                                            IO exception            Stack overflow
                                                            Class not found
                                                            Null pointer 
                                                            Array Outof bound
                                                            
Types of exceptions 1) Checked-> at compile time
                    2) Unchecked-> at runtime exception.Example Null pointer Exception
                    3) Error-> irrecoverable.
Handle by try,catch. Finally block is used to execute the important code of program. It is executed wheteher an exception occur or not.
multiple catch block is allowed. But at a time one is executed.
Whenever the exception arrises JVM will check whether that exception is handeled or not.

throw-> handle one exceptions at a time
throws-> can means this line of code can give multiple exception at a time.

jar file is collection of .class files
Method Chaining -> is caliing different method in a single line. but return type must be same

Inner Classes-> decalre a class inside the class.
                Used-> For ex. Without engine their is no car available and without university there is no department. So without existing outer class their is no 
                chance of existing inner class.
                

Wrapper Class-> converting a datatype into object.
                Example jdk 1.4 does not allow datatype. it only allow object to store in stack.
                Autoboxing-> Converting a primitive value to wrapper object.  Method used valueof();
                AutoUnboxing-> Converting wrapper to primitive.   Method used intValue();
                For every primitive class we have wrapper class.
                
                
final vs finally vs finalize
             final-> keyword
                    value can not be modify
                    
             finally-> block executed whether exception occur or not.
             finalize -> method called by garbage collector when garbage collector determines that there are no more reference to that object.

Without main function we can compile the code but can not run it.

Threads allow program to operate more efficiently by doing multiple things at a same time.
executed by extend thread class or implementing runnable interface present in java.lang package .
Thread Scheduler is a part of JVM which defines in which order thread will execute.
If we call directly t.run() method than it is just like a normal method call. So, no seperate thread will be generated. But if we call t.start() tha it will register
thread to the thread scheduler and perform all the other mandatory activity and than call run method.

Methods to prevent thread execution->
yield()-> to give the chance of the waiting thread which are having the same priority.
join()-> if the thread wants to wait for the completion of another thread than we used join method.
sleep()-> if a thread dont want to perform any activity for a particular amount of time. Example slide rotating of ppt for 2 min.

Synchronization-> used for method or block.
                  If multiple threads are operating on a java object than their is a chance of data inconsistency.
                  
notify vs notify-all : For axample if a thread is in the waiting state and we have to give the notification to the thread than we use this concept.
                      notify -> used to give notification to one thread only.
                      notifyall -> used to give notification for multiple threads

Life cycle of thread-> 
thread.yield->
            
            t.start()                     if Thread scheduler 
                                          alocates processor
New born  --------------> Ready/Runnable ------------------------> Running 
                                ^                                     |
                                |                                     |
.                               |        if thread.yield()            |
                                |_____________________________________|     
                                

Deadlock-> If the two threads wait for each other forever than it is called deadlock. Occurs due to synchronize keyword.
Deadlock vs startvation. (Deadlock means waiting for the resorce but it nevers end. While starvation is waiting for particular time and ens at a certain time.)

Daemon threads-> threads which is executing in the background like garbage collector. 


             























